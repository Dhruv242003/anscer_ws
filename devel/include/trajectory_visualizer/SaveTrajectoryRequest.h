// Generated by gencpp from file trajectory_visualizer/SaveTrajectoryRequest.msg
// DO NOT EDIT!


#ifndef TRAJECTORY_VISUALIZER_MESSAGE_SAVETRAJECTORYREQUEST_H
#define TRAJECTORY_VISUALIZER_MESSAGE_SAVETRAJECTORYREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace trajectory_visualizer
{
template <class ContainerAllocator>
struct SaveTrajectoryRequest_
{
  typedef SaveTrajectoryRequest_<ContainerAllocator> Type;

  SaveTrajectoryRequest_()
    : filename()
    , duration(0.0)  {
    }
  SaveTrajectoryRequest_(const ContainerAllocator& _alloc)
    : filename(_alloc)
    , duration(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _filename_type;
  _filename_type filename;

   typedef float _duration_type;
  _duration_type duration;





  typedef boost::shared_ptr< ::trajectory_visualizer::SaveTrajectoryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trajectory_visualizer::SaveTrajectoryRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SaveTrajectoryRequest_

typedef ::trajectory_visualizer::SaveTrajectoryRequest_<std::allocator<void> > SaveTrajectoryRequest;

typedef boost::shared_ptr< ::trajectory_visualizer::SaveTrajectoryRequest > SaveTrajectoryRequestPtr;
typedef boost::shared_ptr< ::trajectory_visualizer::SaveTrajectoryRequest const> SaveTrajectoryRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::trajectory_visualizer::SaveTrajectoryRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::trajectory_visualizer::SaveTrajectoryRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::trajectory_visualizer::SaveTrajectoryRequest_<ContainerAllocator1> & lhs, const ::trajectory_visualizer::SaveTrajectoryRequest_<ContainerAllocator2> & rhs)
{
  return lhs.filename == rhs.filename &&
    lhs.duration == rhs.duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::trajectory_visualizer::SaveTrajectoryRequest_<ContainerAllocator1> & lhs, const ::trajectory_visualizer::SaveTrajectoryRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace trajectory_visualizer

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::trajectory_visualizer::SaveTrajectoryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trajectory_visualizer::SaveTrajectoryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trajectory_visualizer::SaveTrajectoryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trajectory_visualizer::SaveTrajectoryRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trajectory_visualizer::SaveTrajectoryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trajectory_visualizer::SaveTrajectoryRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::trajectory_visualizer::SaveTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f332c0cc762ad0109a303ddbf2ec7fc1";
  }

  static const char* value(const ::trajectory_visualizer::SaveTrajectoryRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf332c0cc762ad010ULL;
  static const uint64_t static_value2 = 0x9a303ddbf2ec7fc1ULL;
};

template<class ContainerAllocator>
struct DataType< ::trajectory_visualizer::SaveTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trajectory_visualizer/SaveTrajectoryRequest";
  }

  static const char* value(const ::trajectory_visualizer::SaveTrajectoryRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::trajectory_visualizer::SaveTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string filename\n"
"float32 duration\n"
;
  }

  static const char* value(const ::trajectory_visualizer::SaveTrajectoryRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::trajectory_visualizer::SaveTrajectoryRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.filename);
      stream.next(m.duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SaveTrajectoryRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::trajectory_visualizer::SaveTrajectoryRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::trajectory_visualizer::SaveTrajectoryRequest_<ContainerAllocator>& v)
  {
    s << indent << "filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.filename);
    s << indent << "duration: ";
    Printer<float>::stream(s, indent + "  ", v.duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAJECTORY_VISUALIZER_MESSAGE_SAVETRAJECTORYREQUEST_H
